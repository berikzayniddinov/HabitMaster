package e2e

import (
	"HabitMaster/databaseConnector"
	"HabitMaster/routes"
	"bytes"
	"encoding/json"
	"log"
	"net/http"
	"net/http/httptest"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/tebeka/selenium"
)

// setupTestServer —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–º –∏–∑ main.go
func setupTestServer() *httptest.Server {
	r := routes.SetupRoutes() // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	return httptest.NewServer(r)
}
func clearTestUserData() {
	db := databaseConnector.ConnectBD()
	defer db.Close()
	_, err := db.Exec("DELETE FROM users WHERE email = 'test@example.com'")
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
}

// TestUserFlow –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ª–æ–≥–∏–Ω, –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –ª–æ–≥–∞—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func TestUserFlow(t *testing.T) {
	server := setupTestServer()
	defer server.Close()
	var token string

	t.Run("Register", func(t *testing.T) {
		clearTestUserData()
		payload := map[string]string{
			"name":     "Test User",
			"email":    "test@example.com",
			"password": "password123",
		}
		resp := sendRequest(t, server, "POST", "/register", payload, "")
		assert.Equal(t, http.StatusOK, resp.Code, "Expected status 201 Created")

		log.Printf("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s", resp.Body.String())

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
		db := databaseConnector.ConnectBD()
		defer db.Close()
		_, err := db.Exec("UPDATE users SET is_verified=TRUE WHERE email = 'test@example.com'")
		assert.NoError(t, err, "Failed to update user verification status")
	})

	t.Run("Login", func(t *testing.T) {
		payload := map[string]string{
			"email":    "test@example.com",
			"password": "password123",
		}
		resp := sendRequest(t, server, "POST", "/login", payload, "")
		assert.Equal(t, http.StatusOK, resp.Code, "Expected status 200 OK")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø—É—Å—Ç–æ–µ
		if resp.Body.Len() == 0 {
			t.Fatalf("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: —Å—Ç–∞—Ç—É—Å %d", resp.Code)
		}

		var responseData map[string]string
		err := json.Unmarshal(resp.Body.Bytes(), &responseData)
		assert.NoError(t, err, "Failed to decode response JSON")

		token = responseData["token"]
		assert.NotEmpty(t, token, "Expected a non-empty token")
	})

	t.Run("Verify Email", func(t *testing.T) {
		payload := map[string]string{
			"email": "test@example.com",
			"code":  "1234",
		}
		resp := sendRequest(t, server, "POST", "/verify-email", payload, "")
		assert.Equal(t, http.StatusOK, resp.Code, "Expected status 200 OK")
	})

	t.Run("Logout", func(t *testing.T) {
		resp := sendRequest(t, server, "POST", "/logout", nil, token)
		assert.Equal(t, http.StatusOK, resp.Code, "Expected status 200 OK")
	})
}

// TestUIRegistrationAndLogin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ UI

func TestUIRegistrationAndLogin(t *testing.T) {
	service, err := selenium.NewChromeDriverService("C:/Users/berik/Downloads/chromedriver-win64/chromedriver.exe", 9515)
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ChromeDriver: %v", err)
	}
	defer service.Stop()

	caps := selenium.Capabilities{"browserName": "chrome"}
	wd, err := selenium.NewRemote(caps, "http://localhost:9515/wd/hub")
	if err != nil {
		t.Fatal(err)
	}
	defer wd.Quit()

	// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	err = wd.Get("http://localhost:8080/register.html")
	if err != nil {
		t.Fatal(err)
	}

	// ‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ `name`
	time.Sleep(2 * time.Second)

	nameInput, err := wd.FindElement(selenium.ByID, "name")
	if err != nil {
		t.Fatalf("–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç name: %v", err)
	}
	nameInput.SendKeys("Test User")

	emailInput, err := wd.FindElement(selenium.ByID, "email")
	if err != nil {
		t.Fatalf("–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç email: %v", err)
	}
	emailInput.SendKeys("test@example.com")

	passwordInput, err := wd.FindElement(selenium.ByID, "password")
	if err != nil {
		t.Fatalf("–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç password: %v", err)
	}
	passwordInput.SendKeys("password123")

	submitButton, err := wd.FindElement(selenium.ByCSSSelector, "button[type='submit']")
	if err != nil {
		t.Fatalf("–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç submit: %v", err)
	}
	submitButton.Click()
}

// sendRequest –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
func sendRequest(t *testing.T, server *httptest.Server, method, url string, body map[string]string, token string) *httptest.ResponseRecorder {
	var jsonBody []byte
	if body != nil {
		jsonBody, _ = json.Marshal(body)
	}
	req, _ := http.NewRequest(method, server.URL+url, bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	if token != "" {
		req.Header.Set("Authorization", "Bearer "+token)
	}

	resp := httptest.NewRecorder()
	handler := server.Config.Handler
	handler.ServeHTTP(resp, req)

	log.Printf("üì© –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ [%s %s]: —Å—Ç–∞—Ç—É—Å %d, —Ç–µ–ª–æ: %s", method, url, resp.Code, resp.Body.String())
	return resp
}
