package integration_test

import (
	"HabitMaster/databaseConnector"
	"HabitMaster/handlers"
	"bytes"
	"database/sql"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
)

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
var testDB *sql.DB

// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
func setupTestDB(t *testing.T) {
	t.Log("üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
	testDB = databaseConnector.ConnectBD()

	// –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
	_, err := testDB.Exec("DELETE FROM users")
	if err != nil {
		t.Fatalf("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏: %v", err)
	}
	t.Log("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞.")
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–æ–π –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
func teardownTestDB(t *testing.T) {
	if testDB != nil {
		t.Log("üìå –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–æ–π...")
		testDB.Close()
		t.Log("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–æ–π –∑–∞–∫—Ä—ã—Ç–æ.")
	}
}

// üìå **–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
func TestCreateUser(t *testing.T) {
	setupTestDB(t)
	defer teardownTestDB(t)

	user := map[string]string{
		"name":     "Test User",
		"email":    "testuser@example.com",
		"password": "password123",
	}
	body, _ := json.Marshal(user)

	req, err := http.NewRequest("POST", "/api/users", bytes.NewBuffer(body))
	if err != nil {
		t.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	req.Header.Set("Content-Type", "application/json")

	recorder := httptest.NewRecorder()
	handler := handlers.CreateUser(testDB)
	handler.ServeHTTP(recorder, req)

	if recorder.Code != http.StatusCreated {
		t.Errorf("‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 201 Created, –ø–æ–ª—É—á–µ–Ω %v", recorder.Code)
	}

	t.Log("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
}

// üìå **–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**
func TestGetUsers(t *testing.T) {
	setupTestDB(t)
	defer teardownTestDB(t)

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é
	_, err := testDB.Exec(`INSERT INTO users (name, email, password, created_at, updated_at) 
		VALUES ($1, $2, $3, NOW(), NOW())`, "Test User", "testuser@example.com", "hashedpassword")
	if err != nil {
		t.Fatalf("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	req, err := http.NewRequest("GET", "/api/users", nil)
	if err != nil {
		t.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	recorder := httptest.NewRecorder()
	handler := handlers.GetUsers(testDB)
	handler.ServeHTTP(recorder, req)

	if recorder.Code != http.StatusOK {
		t.Errorf("‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200 OK, –ø–æ–ª—É—á–µ–Ω %v", recorder.Code)
	}

	t.Log("‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
}

// üìå **–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ SQL**
func TestDeleteUserManual(t *testing.T) {
	setupTestDB(t)
	defer teardownTestDB(t)

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
	_, err := testDB.Exec(`INSERT INTO users (name, email, password, created_at, updated_at) 
		VALUES ($1, $2, $3, NOW(), NOW())`, "Test User", "testuser@example.com", "hashedpassword")
	if err != nil {
		t.Fatalf("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	// –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é
	res, err := testDB.Exec("DELETE FROM users WHERE email = $1", "testuser@example.com")
	if err != nil {
		t.Fatalf("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	rowsAffected, _ := res.RowsAffected()
	if rowsAffected == 0 {
		t.Errorf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º email –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	t.Log("‚úÖ –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
}
