package integration_test

import (
	"HabitMaster/databaseConnector"
	"HabitMaster/handlers"
	"bytes"
	"database/sql"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
)

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
var testDB *sql.DB

// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
func setupTestDB(t *testing.T) {
	t.Log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
	testDB = databaseConnector.ConnectBD()

	// –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
	_, err := testDB.Exec("DELETE FROM goals")
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏: %v", err)
	}
	t.Log("–¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞.")
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–æ–π –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
func teardownTestDB(t *testing.T) {
	if testDB != nil {
		t.Log("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–æ–π...")
		testDB.Close()
		t.Log("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–æ–π –∑–∞–∫—Ä—ã—Ç–æ.")
	}
}

// üìå **–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏**
func TestCreateGoal(t *testing.T) {
	setupTestDB(t)
	defer teardownTestDB(t)

	goal := map[string]string{
		"name":        "Test Goal",
		"description": "This is a test goal",
		"deadline":    "2025-12-31",
	}
	body, _ := json.Marshal(goal)

	req, err := http.NewRequest("POST", "/api/goals", bytes.NewBuffer(body))
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	req.Header.Set("Content-Type", "application/json")

	recorder := httptest.NewRecorder()
	handler := handlers.CreateGoal(testDB)
	handler.ServeHTTP(recorder, req)

	if recorder.Code != http.StatusOK {
		t.Errorf("–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å OK, –ø–æ–ª—É—á–µ–Ω %v", recorder.Code)
	}

	t.Log("–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
}

// üìå **–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–µ–π**
func TestGetGoals(t *testing.T) {
	setupTestDB(t)
	defer teardownTestDB(t)

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ü–µ–ª—å –≤—Ä—É—á–Ω—É—é
	_, err := testDB.Exec(`INSERT INTO goals (name, description, deadline, created_at, updated_at) VALUES ($1, $2, $3, NOW(), NOW())`,
		"Test Goal", "Test Description", "2025-12-31")
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Ü–µ–ª–∏: %v", err)
	}

	req, err := http.NewRequest("GET", "/api/goals", nil)
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	recorder := httptest.NewRecorder()
	handler := handlers.GetGoals(testDB)
	handler.ServeHTTP(recorder, req)

	if recorder.Code != http.StatusOK {
		t.Errorf("–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å OK, –ø–æ–ª—É—á–µ–Ω %v", recorder.Code)
	}

	t.Log("–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
}

// üìå **–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏**
func TestDeleteGoalByName(t *testing.T) {
	setupTestDB(t)
	defer teardownTestDB(t)

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ü–µ–ª—å –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
	_, err := testDB.Exec(`INSERT INTO goals (name, description, deadline, created_at, updated_at) VALUES ($1, $2, $3, NOW(), NOW())`,
		"Test Goal", "Test Description", "2025-12-31")
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Ü–µ–ª–∏: %v", err)
	}

	// –£–¥–∞–ª—è–µ–º —Ü–µ–ª—å –ø–æ –∏–º–µ–Ω–∏
	reqBody := map[string]string{"name": "Test Goal"}
	body, _ := json.Marshal(reqBody)

	req, err := http.NewRequest("DELETE", "/api/goals", bytes.NewBuffer(body))
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	req.Header.Set("Content-Type", "application/json")

	recorder := httptest.NewRecorder()
	handler := handlers.DeleteGoalByName(testDB)
	handler.ServeHTTP(recorder, req)

	if recorder.Code != http.StatusOK {
		t.Errorf("–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å OK, –ø–æ–ª—É—á–µ–Ω %v", recorder.Code)
	}

	t.Log("–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
}
