package habits_test

import (
	"HabitMaster/databaseConnector"
	"HabitMaster/handlers"
	"bytes"
	"database/sql"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
)

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
var testDB *sql.DB

// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
func setupTestDB(t *testing.T) {
	t.Log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
	testDB = databaseConnector.ConnectBD()

	// –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
	_, err := testDB.Exec("DELETE FROM habits")
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏: %v", err)
	}
	t.Log("–¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞.")
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–æ–π –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
func teardownTestDB(t *testing.T) {
	if testDB != nil {
		t.Log("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–æ–π...")
		testDB.Close()
		t.Log("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–æ–π –∑–∞–∫—Ä—ã—Ç–æ.")
	}
}

// üìå **–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏**
func TestCreateHabit(t *testing.T) {
	setupTestDB(t)
	defer teardownTestDB(t)

	habit := map[string]string{
		"name":        "Test Habit",
		"description": "This is a test habit",
	}
	body, _ := json.Marshal(habit)

	req, err := http.NewRequest("POST", "/api/habits", bytes.NewBuffer(body))
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	req.Header.Set("Content-Type", "application/json")

	recorder := httptest.NewRecorder()
	handler := handlers.CreateHabit(testDB)
	handler.ServeHTTP(recorder, req)

	if recorder.Code != http.StatusOK {
		t.Errorf("–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å OK, –ø–æ–ª—É—á–µ–Ω %v", recorder.Code)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
	var responseHabit map[string]interface{}
	err = json.Unmarshal(recorder.Body.Bytes(), &responseHabit)
	if err != nil || responseHabit["name"] != "Test Habit" {
		t.Errorf("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API: %v", recorder.Body.String())
	}

	t.Log("–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
}

// üìå **–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫**
func TestGetHabits(t *testing.T) {
	setupTestDB(t)
	defer teardownTestDB(t)

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –≤—Ä—É—á–Ω—É—é
	_, err := testDB.Exec(`INSERT INTO habits (name, description, created_at, updated_at) VALUES ($1, $2, NOW(), NOW())`,
		"Test Habit", "Test Description")
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏: %v", err)
	}

	req, err := http.NewRequest("GET", "/api/habits", nil)
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	recorder := httptest.NewRecorder()
	handler := handlers.GetHabits(testDB)
	handler.ServeHTTP(recorder, req)

	if recorder.Code != http.StatusOK {
		t.Errorf("–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å OK, –ø–æ–ª—É—á–µ–Ω %v", recorder.Code)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
	var habits []map[string]interface{}
	err = json.Unmarshal(recorder.Body.Bytes(), &habits)
	if err != nil || len(habits) == 0 {
		t.Errorf("–û–∂–∏–¥–∞–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ, –Ω–æ –ø—Ä–∏—à–ª–æ: %v", recorder.Body.String())
	}

	t.Log("–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
}

// üìå **–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏**
// üìå **–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏**
func TestDeleteHabitByName(t *testing.T) {
	setupTestDB(t)
	defer teardownTestDB(t)

	// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
	_, err := testDB.Exec(`INSERT INTO habits (name, description, created_at, updated_at) VALUES ($1, $2, NOW(), NOW())`,
		"Test Habit", "Test Description")
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏: %v", err)
	}

	// ‚úÖ –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É –ø–æ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ JSON body
	reqBody := map[string]string{"name": "Test Habit"}
	body, _ := json.Marshal(reqBody)

	req, err := http.NewRequest("DELETE", "/api/habits", bytes.NewBuffer(body))
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	req.Header.Set("Content-Type", "application/json")

	recorder := httptest.NewRecorder()
	handler := handlers.DeleteHabitByName(testDB)
	handler.ServeHTTP(recorder, req)

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –≤–µ—Ä–Ω—É–ª `200 OK`
	if recorder.Code != http.StatusOK {
		t.Errorf("–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å OK, –ø–æ–ª—É—á–µ–Ω %v", recorder.Code)
		t.Logf("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: %s", recorder.Body.String()) // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
	}

	t.Log("–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
}
