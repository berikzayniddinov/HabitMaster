package auth

import (
	"HabitMaster/databaseConnector"
	"HabitMaster/handlers"

	"crypto/tls"
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"os"
	"time"

	"github.com/dgrijalva/jwt-go"
	"github.com/go-gomail/gomail"
	"golang.org/x/crypto/bcrypt"
)

var jwtKey = []byte(os.Getenv("SECRET_KEY"))

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
func GenerateVerificationCode() (string, error) {
	rand.Seed(time.Now().UnixNano())              // –ò—Å–ø–æ–ª—å–∑—É–µ–º math/rand –ø—Ä–∞–≤–∏–ª—å–Ω–æ
	code := fmt.Sprintf("%04d", rand.Intn(10000)) // –í—Å–µ–≥–¥–∞ 4 —Ü–∏—Ñ—Ä—ã
	return code, nil
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ email
func sendVerificationEmail(userEmail, code string) error {
	smtpHost := os.Getenv("SMTP_HOST")
	smtpPort := 587
	smtpUser := os.Getenv("SMTP_USER")
	smtpPass := os.Getenv("SMTP_PASSWORD")
	smtpFrom := smtpUser // Gmail —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –±—ã–ª —Ç–µ–º –∂–µ, —á—Ç–æ –∏ –ª–æ–≥–∏–Ω

	log.Printf("üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ %s –Ω–∞ %s", code, userEmail)

	m := gomail.NewMessage()
	m.SetHeader("From", smtpFrom)
	m.SetHeader("To", userEmail)
	m.SetHeader("Subject", "Your Verification Code")
	m.SetBody("text/html", fmt.Sprintf("<h3>Your verification code: <b>%s</b></h3>", code))

	d := gomail.NewDialer(smtpHost, smtpPort, smtpUser, smtpPass)
	d.SSL = false
	d.TLSConfig = &tls.Config{InsecureSkipVerify: true}

	err := d.DialAndSend(m)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: %v", err)
		return err
	}

	log.Println("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
	return nil
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è JWT-—Ç–æ–∫–µ–Ω–∞
type Claims struct {
	Email string `json:"email"`
	Role  string `json:"role"`
	jwt.StandardClaims
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func Register(w http.ResponseWriter, r *http.Request) {
	var user handlers.User

	// 1. –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON-–∑–∞–ø—Ä–æ—Å
	err := json.NewDecoder(r.Body).Decode(&user)
	if err != nil {
		http.Error(w, `{"error": "Invalid JSON format"}`, http.StatusBadRequest)
		return
	}

	// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	if user.Name == "" || user.Email == "" || user.Password == "" {
		http.Error(w, `{"error": "Name, Email, and Password are required"}`, http.StatusBadRequest)
		return
	}

	// 3. –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(user.Password), bcrypt.DefaultCost)
	if err != nil {
		http.Error(w, `{"error": "Error hashing password"}`, http.StatusInternalServerError)
		return
	}

	// 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 4-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
	verificationCode, err := GenerateVerificationCode()
	if err != nil {
		http.Error(w, `{"error": "Error generating verification code"}`, http.StatusInternalServerError)
		return
	}

	// 5. –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
	query := `INSERT INTO users (name, email, password, role, is_verified, verification_code) 
              VALUES ($1, $2, $3, 'user', FALSE, $4) RETURNING user_id`
	err = databaseConnector.ConnectBD().QueryRow(query, user.Name, user.Email, string(hashedPassword), verificationCode).Scan(&user.UserID)

	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		http.Error(w, `{"error": "Database insert error"}`, http.StatusInternalServerError)
		return
	}

	// 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ email
	err = sendVerificationEmail(user.Email, verificationCode)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: %v", err)
		http.Error(w, `{"error": "Failed to send verification email"}`, http.StatusInternalServerError)
		return
	}

	// ‚úÖ **–û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Å `201 Created`**
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK) // üëà **–¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ß–Å–¢–ö–û –ø–µ—Ä–µ–¥ JSON-–æ—Ç–≤–µ—Ç–æ–º**

	log.Println("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å 201")

	// **–ö–æ–¥–∏—Ä—É–µ–º JSON-–æ—Ç–≤–µ—Ç**
	if err := json.NewEncoder(w).Encode(map[string]string{
		"message":  "Check your email for the verification code.",
		"redirect": "/verify.html",
	}); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
	}
}

// –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func Login(w http.ResponseWriter, r *http.Request) {
	var user handlers.User

	err := json.NewDecoder(r.Body).Decode(&user)
	if err != nil {
		http.Error(w, `{"error": "Invalid JSON format"}`, http.StatusBadRequest)
		return
	}

	var dbUser handlers.User
	query := `SELECT user_id, email, password, role FROM users WHERE email=$1`
	err = databaseConnector.ConnectBD().QueryRow(query, user.Email).Scan(&dbUser.UserID, &dbUser.Email, &dbUser.Password, &dbUser.Role)

	if err != nil {
		http.Error(w, `{"error": "Invalid email or password"}`, http.StatusUnauthorized)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
	err = bcrypt.CompareHashAndPassword([]byte(dbUser.Password), []byte(user.Password))
	if err != nil {
		http.Error(w, `{"error": "Invalid email or password"}`, http.StatusUnauthorized)
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
	expirationTime := time.Now().Add(24 * time.Hour)
	claims := &Claims{
		Email: dbUser.Email,
		Role:  dbUser.Role,
		StandardClaims: jwt.StandardClaims{
			ExpiresAt: expirationTime.Unix(),
		},
	}

	token, err := jwt.NewWithClaims(jwt.SigningMethodHS256, claims).SignedString(jwtKey)
	if err != nil {
		http.Error(w, `{"error": "Error generating token"}`, http.StatusInternalServerError)
		return
	}

	// ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º JSON-–æ—Ç–≤–µ—Ç
	response := map[string]string{
		"email": dbUser.Email,
		"role":  dbUser.Role,
		"token": token,
	}

	// ‚úÖ –°–Ω–∞—á–∞–ª–∞ –∫–æ–¥–∏—Ä—É–µ–º JSON, –∞ –∑–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
	w.Header().Set("Content-Type", "application/json")
	err = json.NewEncoder(w).Encode(response)
	if err != nil {
		http.Error(w, `{"error": "Error encoding response"}`, http.StatusInternalServerError)
		return
	}

	log.Printf("üì© –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: %+v\n", response)
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 4-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
func VerifyCode(w http.ResponseWriter, r *http.Request) {
	// –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç JSON
	w.Header().Set("Content-Type", "application/json")

	var request struct {
		Email string `json:"email"`
		Code  string `json:"code"`
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON-–∑–∞–ø—Ä–æ—Å
	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON:", err)
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(map[string]string{"error": "Invalid JSON format"})
		return
	}

	log.Printf("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞: Email=%s, Code=%s", request.Email, request.Code)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ email –≤ –ë–î
	var username string
	query := `SELECT name FROM users WHERE email=$1`
	err := databaseConnector.ConnectBD().QueryRow(query, request.Email).Scan(&username)

	if err != nil {
		log.Printf("‚ö†Ô∏è Email –Ω–µ –Ω–∞–π–¥–µ–Ω: %s, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º", request.Email)

		// –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Ö–æ–¥ –¥–∞–∂–µ –µ—Å–ª–∏ email –Ω–µ –Ω–∞–π–¥–µ–Ω
		username = request.Email
	}

	// ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_verified = TRUE (–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ email)
	_, err = databaseConnector.ConnectBD().Exec(`UPDATE users SET is_verified=TRUE WHERE email=$1`, request.Email)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –¥–ª—è: %s", request.Email)
		w.WriteHeader(http.StatusInternalServerError)
		json.NewEncoder(w).Encode(map[string]string{"error": "Database update failed"})
		return
	}

	// ‚úÖ –í—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: %s", request.Email)

	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{
		"message":  "Verification successful! You are now logged in.",
		"username": username,
	})
}

func Logout(w http.ResponseWriter, r *http.Request) {
	// –û—á–∏—â–∞–µ–º cookie —Å —Ç–æ–∫–µ–Ω–æ–º
	http.SetCookie(w, &http.Cookie{
		Name:     "token",
		Value:    "",
		Expires:  time.Unix(0, 0),
		HttpOnly: true,
		Path:     "/",
	})

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{"message": "Logged out successfully"})
}
